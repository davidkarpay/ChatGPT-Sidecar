name: CI

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio ruff
    
    - name: Run core tests
      run: |
        # Run critical unit tests that don't require heavy models
        pytest tests/test_text.py -q
        pytest tests/test_vectorstore.py::TestFaissStoreEncoding::test_encode_single_text -q
    
    - name: Lint with ruff
      run: |
        # Check Python code style and common errors
        ruff check app/ --exit-zero
      continue-on-error: true
    
    - name: Check security configuration
      run: |
        # Verify security configs are properly set
        python -c "from app.config import ensure_under_allowed_root, DISABLE_ADMIN_ENDPOINTS; print('✓ Security config loads successfully')"
    
    - name: Check imports
      run: |
        # Verify all imports work
        python -c "from app.main import app; print('✓ FastAPI app imports successfully')"
        python -c "from app.api_auth import APIKeyManager; print('✓ Auth system imports successfully')"
        python -c "from app.llm_providers import LLMProviderFactory; print('✓ LLM providers import successfully')"

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t sidecar-test:latest .
    
    - name: Test Docker image
      run: |
        # Basic smoke test of the Docker image
        docker run --rm sidecar-test:latest python -c "from app.main import app; print('✓ Docker image works')"